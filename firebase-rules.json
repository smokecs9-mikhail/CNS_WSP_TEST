{
  "rules": {
    ".read": false,
    ".write": false,

    "users": {
      // 호환성: 새로운 데이터 모델과 기존 데이터 모델 모두 지원
      "$uid": {
        // 개별 사용자 데이터 읽기: 관리자 또는 본인
        ".read": "auth != null && (root.child('meta/roles').child(auth.uid).child('role').val() === 'admin' || root.child('meta/admins').child(auth.uid).val() === true || auth.uid === $uid)",
        // 개별 사용자 데이터 쓰기: 관리자 또는 본인(신규 생성 시)
        ".write": "auth != null && (root.child('meta/roles').child(auth.uid).child('role').val() === 'admin' || root.child('meta/admins').child(auth.uid).val() === true || (auth.uid === $uid && (!data.exists() || newData.child('status').val() === 'pending')))",
        // 민감한 필드 보호: 비밀번호는 저장하지 않음
        "password": {
          ".read": false,
          ".write": false
        },
        // 승인된 사용자만 민감한 정보 접근
        "status": {
          ".read": "auth != null && (root.child('meta/roles').child(auth.uid).child('role').val() === 'admin' || root.child('meta/admins').child(auth.uid).val() === true || auth.uid === $uid)"
        },
        // 역할 정보는 별도 인덱스에서 관리 (기존 구조 호환)
        "role": {
          ".read": "auth != null && (root.child('meta/roles').child(auth.uid).child('role').val() === 'admin' || root.child('meta/admins').child(auth.uid).val() === true || auth.uid === $uid)",
          ".write": "auth != null && (root.child('meta/roles').child(auth.uid).child('role').val() === 'admin' || root.child('meta/admins').child(auth.uid).val() === true)"
        },
        // 기존 구조 호환: firebaseUid 필드
        "firebaseUid": {
          ".read": "auth != null && (root.child('meta/roles').child(auth.uid).child('role').val() === 'admin' || root.child('meta/admins').child(auth.uid).val() === true || auth.uid === $uid)",
          ".write": "auth != null && (root.child('meta/roles').child(auth.uid).child('role').val() === 'admin' || root.child('meta/admins').child(auth.uid).val() === true)"
        }
      }
    },

    // 더 이상 사용하지 않음: 전면 차단
    "migratedUsers": {
      ".read": false,
      ".write": false
    },

    "scheduleData": {
      ".read": "auth != null",
      ".write": "auth != null"
    },

    "propertyCalculator": {
      ".read": "auth != null",
      ".write": "auth != null"
    },

    "meta": {
      // 메타 정보는 관리자 전용 (호환성 포함)
      ".read": "auth != null && (root.child('meta/roles').child(auth.uid).child('role').val() === 'admin' || root.child('meta/admins').child(auth.uid).val() === true)",
      ".write": "auth != null && (root.child('meta/roles').child(auth.uid).child('role').val() === 'admin' || root.child('meta/admins').child(auth.uid).val() === true)",
      
      // 개선된 역할 관리: meta/roles/{uid} 인덱스 (호환성 포함)
      "roles": {
        "$uid": {
          // 역할 정보 읽기: 관리자 또는 본인
          ".read": "auth != null && (root.child('meta/roles').child(auth.uid).child('role').val() === 'admin' || root.child('meta/admins').child(auth.uid).val() === true || auth.uid === $uid)",
          // 역할 정보 쓰기: 관리자만
          ".write": "auth != null && (root.child('meta/roles').child(auth.uid).child('role').val() === 'admin' || root.child('meta/admins').child(auth.uid).val() === true)",
          "role": {
            // 역할 필드: 관리자만 읽기/쓰기
            ".read": "auth != null && (root.child('meta/roles').child(auth.uid).child('role').val() === 'admin' || root.child('meta/admins').child(auth.uid).val() === true)",
            ".write": "auth != null && (root.child('meta/roles').child(auth.uid).child('role').val() === 'admin' || root.child('meta/admins').child(auth.uid).val() === true)"
          },
          "permissions": {
            // 권한 정보: 관리자만 읽기/쓰기
            ".read": "auth != null && (root.child('meta/roles').child(auth.uid).child('role').val() === 'admin' || root.child('meta/admins').child(auth.uid).val() === true)",
            ".write": "auth != null && (root.child('meta/roles').child(auth.uid).child('role').val() === 'admin' || root.child('meta/admins').child(auth.uid).val() === true)"
          }
        }
      },
      
      // 기존 admins 구조는 호환성을 위해 유지 (deprecated)
      "admins": {
        "$uid": {
          ".read": "auth != null && (root.child('meta/roles').child(auth.uid).child('role').val() === 'admin' || root.child('meta/admins').child(auth.uid).val() === true)",
          ".write": "auth != null && (root.child('meta/roles').child(auth.uid).child('role').val() === 'admin' || root.child('meta/admins').child(auth.uid).val() === true)"
        }
      }
    }
  }
}
